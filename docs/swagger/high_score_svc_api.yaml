openapi: 3.0.1
info:
  title: High Score
  description: Microservice API for High Score
  version: 1.0-oas3
servers:
  - url: 'http://localhost:8003/api/v1'
paths:
  /high_score:
    get:
      tags:
        - high_score
      summary: Get the top 10 users
      operationId: get_high_score_top
      responses:
        '200':
          description: Top 10 users returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighScoreArray'
  '/high_score/{username}':
    get:
      tags:
        - high_score
      summary: Get the ranking of the desired user
      operationId: get_user_high_score
      parameters:
        - name: username
          in: path
          description: The username that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Top 10 users returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighScore'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'common_components.yaml#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: 'common_components.yaml#/components/schemas/Error'
        '422':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: 'common_components.yaml#/components/schemas/Error'
    post:
      tags:
        - high_score
      summary: Increment the win/loss/ragequit count for the desired user
      operationId: post_high_score_update
      parameters:
        - name: username
          in: path
          description: The username that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Whether the user has won, lost or ragequit
        content:
          application/json:
            schema:
              type: object
              properties:
                game_result:
                  type: string
                  enum: [won, lost, ragequit]
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighScore'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'common_components.yaml#/components/schemas/Error'
        '422':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: 'common_components.yaml#/components/schemas/Error'
components:
  schemas:
    HighScore:
      description: high score object
      type: object
      properties:
        username:
          type: string
        wins:
          type: integer
        loses:
          type: integer
        ragequits:
          type: integer
        rank:
          type: integer
    HighScoreArray:
      description: array of high scores
      type: array
      items:
        $ref: '#/components/schemas/HighScore'