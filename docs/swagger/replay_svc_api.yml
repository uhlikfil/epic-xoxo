openapi: 3.0.1
info:
  title: Replay Service
  description: 'Stores and serves replays of the game `connect 5`.'
  contact:
    email: neuvimat@fel.cvut.cz
  version: 1.0.0
servers:
  - url: http://localhost/api/v3
tags:
  - name: replay
    description: Sum stuff 'bout 'em replayz
paths:
  /replay:
    put:
      tags:
        - replay
      summary: Update an existing replay
      operationId: update_replay
      requestBody:
        description: Updates a replay based on the supplied ID. All fields in the schema are required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Replay'
        required: true
      responses:
        200:
          description: All is fine
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Replay not found
          content: {}
    post:
      tags:
        - replay
      summary: Add a new replay to the store
      operationId: add_replay
      requestBody:
        description: Replay object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Replay'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replay'
        405:
          description: Invalid input
          content: {}
  /replay/filter:
    post:
      tags:
        - replay
      summary: Search across all the replays
      description: Filters through replays based on supplied filters. Returns abridged version of replays, where the specific turns (field `plays`) are not listed for brevity. If you need that, ask for a specific replay by its id. Also it is okay to use post method for liters because mongoDB does it too :)
      operationId: filter_replays
      requestBody:
        description: Filter criterions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplayFilter'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplayArray'
        400:
          description: Invalid request
          content: {}
  /replay/{replayId}:
    get:
      tags:
        - replay
      summary: Get a replay by ID
      description: Returns a single replay by its ID
      operationId: get_replay_by_id
      parameters:
        - name: replayId
          in: path
          description: ID of replay to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replay'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Replay not found
          content: {}
    delete:
      tags:
        - replay
      summary: Deletes a replay
      operationId: delete_replay
      parameters:
        - name: replayId
          in: path
          description: Replay id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: success
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Replay not found
          content: {}
components:
  schemas:
    ReplayShort:
      type: object
      properties:
        id:
          type: integer
          format: int64
        player1Id:
          description: The host of the match
          type: string
        player2Id:
          description: The other player (i.e. not the host)
          type: string
        winnerId:
          description: ID of the winner of the match
          type: string
        startingId:
          description: ID of the player that started the game
          type: string
        rounds:
          description: How many rounds the match took
          type: integer
          format: int64
        date:
          type: integer
        completed:
          description: Is `true` if the game ended properly, `false` if the opponent ragequit.
          type: boolean
    Replay:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReplayShort'
        - type: object
      properties:
        plays:
          description: 'Array of turns, each turn is an array of [position X, position Y]'
          type: array
          items:
            type: array
            items:
              type: integer
              minItems: 2
              maxItems: 2
    ReplayArray:
      type: array
      items:
        $ref: '#/components/schemas/ReplayShort'
    ReplayFilter:
      type: object
      properties:
        player1Id:
          description: The host of the match
          type: string
        player2Id:
          description: The other player (i.e. not the host)
          type: string
        winnerId:
          description: Id of the winning player
          type: string
        startingId:
          description: Id of the starting player
          type: string
        hasPlayerId:
          description: These player Ids are in the match
          type: string
        date:
          type: object
          properties:
            before:
              type: integer
            after:
              type: integer
        completed:
          type: boolean
          description: Whether the game finished as expected (`true`) or the opponent has left the game (`false`)
        plays:
          type: array
          items:
            type: integer
          minItems: 2
          maxItems: 2
        rounds:
          type: object
          properties:
            gte:
              description: Greater than or equal to this value
              type: integer
              format: int64
            lte:
              description: Less than or equal to this value
              type: integer
              format: int64