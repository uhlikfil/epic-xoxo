openapi: 3.0.1
info:
  title: Users
  description: Microservice API for user management
  version: "1.0"
servers:
- url: /
paths:
  /user:
    post:
      tags:
      - user
      summary: Create a new user
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User created and is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user supplied
          content: {}
        409:
          description: User already exists
          content: {}
      x-codegen-request-body-name: body
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by username
      operationId: get_user_by_username
      parameters:
      - name: username
        in: path
        description: The username that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Update user
      operationId: update_user
      parameters:
      - name: username
        in: path
        description: user that needs to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      operationId: delete_user
      parameters:
      - name: username
        in: path
        description: The user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        204:
          description: User deleted successfully
          content: {}
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /userdetail/{username}:
    get:
      tags:
        - user
      summary: User with other aggregated data
      operationId: get_userdetail
      parameters:
      - name: username
        in: path
        description: The username that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password_hash:
          type: string
        username:
          type: string
        verified:
          type: boolean
      description: user object
      xml:
        name: User
    UserDetail:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
      properties:
        achievements:
          type: array
          items:
            type: string
