openapi: 3.0.1
info:
  title: Replayz
  description: Stores and serves replays of the game `connect 5`.
  contact:
    email: neuvimat@fel.cvut.cz
  version: 1.0.0
servers:
  - url: http://localhost/api/v3
tags:
  - name: replay
    description: Sum stuff 'bout 'em replayz
paths:
  /replay:
    put:
      tags:
        - replay
      summary: Update an existing replay
      operationId: update_replay
      requestBody:
        description: Updates a replay based on the supplied ID. All fields in the
          schema are required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Replay'
        required: true
      responses:
        "200":
          description: All is fine
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Replay not found
          content: {}
      x-swagger-router-controller: Replay
    post:
      tags:
        - replay
      summary: Add a new replay to the store
      operationId: add_replay
      requestBody:
        description: Replay object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Replay'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replay'
        "405":
          description: Invalid input
          content: {}
      x-swagger-router-controller: Replay
  /replay/filter:
    post:
      tags:
        - replay
      summary: Search across all the replays
      description: "Filters through replays based on supplied filters. Returns abridged\
        \ version of replays, where the specific turns (field `plays`) are not listed\
        \ for brevity. If you need that, ask for a specific replay by its id. Also\
        \ it is okay to use post method for liters because mongoDB does it too :)"
      operationId: filter_replays
      requestBody:
        description: Filter criterions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplayFilter'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplayArray'
        "400":
          description: Invalid request
          content: {}
      x-swagger-router-controller: Replay
  /replay/{replayId}:
    get:
      tags:
        - replay
      summary: Get a replay by ID
      description: Returns a single replay by its ID
      operationId: get_replay_by_id
      parameters:
        - name: replayId
          in: path
          description: ID of replay to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replay'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Replay not found
          content: {}
      x-swagger-router-controller: Replay
    delete:
      tags:
        - replay
      summary: Deletes a replay
      operationId: delete_replay
      parameters:
        - name: replayId
          in: path
          description: Replay id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: success
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Replay not found
          content: {}
      x-swagger-router-controller: Replay
components:
  schemas:
    ReplayShort:
      type: object
      properties:
        id:
          type: integer
          format: int64
        player1Id:
          type: string
          description: The host of the match
        player2Id:
          type: string
          description: The other player (i.e. not the host)
        winnerId:
          type: string
          description: ID of the winner of the match
        startingId:
          type: string
          description: ID of the player that started the game
        rounds:
          type: integer
          description: How many rounds the match took
          format: int64
        date:
          type: integer
        completed:
          type: boolean
          description: "Is `true` if the game ended properly, `false` if the opponent\
            \ ragequit."
      example:
        date: 1
        player1Id: player1Id
        player2Id: player2Id
        winnerId: winnerId
        id: 0
        completed: true
        startingId: startingId
        rounds: 6
    Replay:
      type: object
      properties:
        plays:
          type: array
          description: "Array of turns, each turn is an array of [position X, position\
            \ Y]"
          items:
            type: array
            items:
              maxItems: 2
              minItems: 2
              type: integer
      example:
        plays:
          - - 0
            - 0
          - - 0
            - 0
      allOf:
        - $ref: '#/components/schemas/ReplayShort'
        - type: object
    ReplayArray:
      type: array
      items:
        $ref: '#/components/schemas/ReplayShort'
    ReplayFilter:
      type: object
      properties:
        player1Id:
          type: string
          description: The host of the match
        player2Id:
          type: string
          description: The other player (i.e. not the host)
        winnerId:
          type: string
          description: Id of the winning player
        startingId:
          type: string
          description: Id of the starting player
        hasPlayerId:
          type: string
          description: These player Ids are in the match
        date:
          $ref: '#/components/schemas/ReplayFilter_date'
        completed:
          type: boolean
          description: Whether the game finished as expected (`true`) or the opponent
            has left the game (`false`)
        plays:
          maxItems: 2
          minItems: 2
          type: array
          items:
            type: integer
        rounds:
          $ref: '#/components/schemas/ReplayFilter_rounds'
    ReplayFilter_date:
      type: object
      properties:
        before:
          type: integer
        after:
          type: integer
    ReplayFilter_rounds:
      type: object
      properties:
        gte:
          type: integer
          description: Greater than or equal to this value
          format: int64
        lte:
          type: integer
          description: Less than or equal to this value
          format: int64
