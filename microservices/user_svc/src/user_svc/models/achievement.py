# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from user_svc.models.base_model_ import Model
from user_svc import util


class Achievement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, name: str = None, description: str = None, achievement_points: int = None
    ):  # noqa: E501
        """Achievement - a model defined in Swagger

        :param name: The name of this Achievement.  # noqa: E501
        :type name: str
        :param description: The description of this Achievement.  # noqa: E501
        :type description: str
        :param achievement_points: The achievement_points of this Achievement.  # noqa: E501
        :type achievement_points: int
        """
        self.swagger_types = {
            "name": str,
            "description": str,
            "achievement_points": int,
        }

        self.attribute_map = {
            "name": "name",
            "description": "description",
            "achievement_points": "achievement_points",
        }
        self._name = name
        self._description = description
        self._achievement_points = achievement_points

    @classmethod
    def from_dict(cls, dikt) -> "Achievement":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Achievement of this Achievement.  # noqa: E501
        :rtype: Achievement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Achievement.


        :return: The name of this Achievement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Achievement.


        :param name: The name of this Achievement.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Achievement.


        :return: The description of this Achievement.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Achievement.


        :param description: The description of this Achievement.
        :type description: str
        """

        self._description = description

    @property
    def achievement_points(self) -> int:
        """Gets the achievement_points of this Achievement.


        :return: The achievement_points of this Achievement.
        :rtype: int
        """
        return self._achievement_points

    @achievement_points.setter
    def achievement_points(self, achievement_points: int):
        """Sets the achievement_points of this Achievement.


        :param achievement_points: The achievement_points of this Achievement.
        :type achievement_points: int
        """

        self._achievement_points = achievement_points
