# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from user_svc.models.base_model_ import Model
from user_svc.models.achievement import Achievement  # noqa: F401,E501
from user_svc.models.high_score import HighScore  # noqa: F401,E501
from user_svc.models.user import User  # noqa: F401,E501
from user_svc import util


class UserDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, origin_ip: str=None, last_ip: str=None, created: int=None, updated: int=None, achievements: List[Achievement]=None, high_score: HighScore=None):  # noqa: E501
        """UserDetail - a model defined in Swagger

        :param username: The username of this UserDetail.  # noqa: E501
        :type username: str
        :param origin_ip: The origin_ip of this UserDetail.  # noqa: E501
        :type origin_ip: str
        :param last_ip: The last_ip of this UserDetail.  # noqa: E501
        :type last_ip: str
        :param created: The created of this UserDetail.  # noqa: E501
        :type created: int
        :param updated: The updated of this UserDetail.  # noqa: E501
        :type updated: int
        :param achievements: The achievements of this UserDetail.  # noqa: E501
        :type achievements: List[Achievement]
        :param high_score: The high_score of this UserDetail.  # noqa: E501
        :type high_score: HighScore
        """
        self.swagger_types = {
            'username': str,
            'origin_ip': str,
            'last_ip': str,
            'created': int,
            'updated': int,
            'achievements': List[Achievement],
            'high_score': HighScore
        }

        self.attribute_map = {
            'username': 'username',
            'origin_ip': 'origin_ip',
            'last_ip': 'last_ip',
            'created': 'created',
            'updated': 'updated',
            'achievements': 'achievements',
            'high_score': 'high_score'
        }
        self._username = username
        self._origin_ip = origin_ip
        self._last_ip = last_ip
        self._created = created
        self._updated = updated
        self._achievements = achievements
        self._high_score = high_score

    @classmethod
    def from_dict(cls, dikt) -> 'UserDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserDetail of this UserDetail.  # noqa: E501
        :rtype: UserDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this UserDetail.


        :return: The username of this UserDetail.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserDetail.


        :param username: The username of this UserDetail.
        :type username: str
        """

        self._username = username

    @property
    def origin_ip(self) -> str:
        """Gets the origin_ip of this UserDetail.


        :return: The origin_ip of this UserDetail.
        :rtype: str
        """
        return self._origin_ip

    @origin_ip.setter
    def origin_ip(self, origin_ip: str):
        """Sets the origin_ip of this UserDetail.


        :param origin_ip: The origin_ip of this UserDetail.
        :type origin_ip: str
        """

        self._origin_ip = origin_ip

    @property
    def last_ip(self) -> str:
        """Gets the last_ip of this UserDetail.


        :return: The last_ip of this UserDetail.
        :rtype: str
        """
        return self._last_ip

    @last_ip.setter
    def last_ip(self, last_ip: str):
        """Sets the last_ip of this UserDetail.


        :param last_ip: The last_ip of this UserDetail.
        :type last_ip: str
        """

        self._last_ip = last_ip

    @property
    def created(self) -> int:
        """Gets the created of this UserDetail.


        :return: The created of this UserDetail.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this UserDetail.


        :param created: The created of this UserDetail.
        :type created: int
        """

        self._created = created

    @property
    def updated(self) -> int:
        """Gets the updated of this UserDetail.


        :return: The updated of this UserDetail.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated: int):
        """Sets the updated of this UserDetail.


        :param updated: The updated of this UserDetail.
        :type updated: int
        """

        self._updated = updated

    @property
    def achievements(self) -> List[Achievement]:
        """Gets the achievements of this UserDetail.


        :return: The achievements of this UserDetail.
        :rtype: List[Achievement]
        """
        return self._achievements

    @achievements.setter
    def achievements(self, achievements: List[Achievement]):
        """Sets the achievements of this UserDetail.


        :param achievements: The achievements of this UserDetail.
        :type achievements: List[Achievement]
        """

        self._achievements = achievements

    @property
    def high_score(self) -> HighScore:
        """Gets the high_score of this UserDetail.


        :return: The high_score of this UserDetail.
        :rtype: HighScore
        """
        return self._high_score

    @high_score.setter
    def high_score(self, high_score: HighScore):
        """Sets the high_score of this UserDetail.


        :param high_score: The high_score of this UserDetail.
        :type high_score: HighScore
        """

        self._high_score = high_score
